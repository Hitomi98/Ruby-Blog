RUBY ON RAILS NOTES

CHAPTER 14:
	Arrays are as simple as declaring
		   mynumbers = [4 ,5, 6, 3, 23, 1]
	
	Hashes
		user = {
				'first_name' => 'john',
			   	'last_name' => 'smith'
				}
	
		Some Hash Methods:
			 user.sort
			 user.sort
	
		Can Create Arrays Of Hashes
	
	Loops
		5.times {}		 # executes everything inside curly braces 5 times
		4.upto(9) {}	 # executes everything inside curly braces 5 times
		7.downto(2) {}   # executes everything inside curly braces 5 times
	
		While Loops (self explanatory)
		For/Each Loops
			planets = ['Earth', 'Mars', 'Jupiter']
			planets.each{|x| puts x} # will print out each value in the array
	
CHAPTER 15: Rails App Framework
	Now we're going over the file structure of rails
	This is what the directory structure looks like:
	
	root/
		app/ # this is where the main directory where most of our code lives
			controllers/ # contains all controller classes
			 			 # handles all http requests from browser
						 # will use data from model and view to display it to the user

			helpers/ # help controller and keep it uncluttered
					 # random functions and methods

			models/ # database
					# holds database classes

			views/ # presentation files (html) that will be shown to the user
				   layouts/ # template files for layouts (headers, footers, 	

		components/ # small self contained apps that will bundle the model, view, and controller

		config/ # config files
				# contains routes.rb files -> used for changing homepage, for example

		db/ # contains database migrations (?)

		doc/ # for documentation (uses rubydoc)

		lib/ # contains libraries and library classes

		log/ # to store logs

		public/ # public files available to the web, for example js files, css, images, static html etc.

		scripts/ # contains scripts (?)

		test/ # mocks, unit testing, etc.

		tmp/ # contains temporary files used for intermediate processing

		vendors/ # third party libraries

		README (file) # basic details about a rails application
		rakefile (file) # similiar to unix make file, helps with building, packaging, testing
				 (need to review make files)

CHAPTER 16: 		
	Talking about heroku
		basically acts like a web server
	
	He says the hardest part of any rails app is just the setup which has been done
	   next parts will be the main part
	

CHAPTER 17: Time to learn MVC
	MVC is really CMV because the controller usually comes first
	 
	In rails every controller has a model
	 	controllers are always named pluraly ("posts")
		(the corresponding) models are named singularly ("posts")
	
	We just created a controller named "posts"

	Next we will learn about actions
		actions are just methods (def)
		there are 7 types of actions
			index action - basically the "root" action
			edit
			show
			new
			create
			destroy

		Now we must create a view
			the "posts" folder was already created for us in app/views
			inside this "posts" folder is where the html/css/whatever pages go
				for the view (which is what the user sees)

		Now we need to create a route (?) for our post controller
			we went in an edited the config/routes.rb file

CHAPTER 18:
	used the "rake routes" command
	
	So now we have created a bunch of views,
	within each view we have created an .html.erb file
	the name of the view is "posts"
		and the name of the new erb files are:
			edit
			new
			show
		we can go to:
		   localhost:3000/posts/edit
		   localhost:3000/posts/show
		   localhost:3000/posts/new	   
	
		from this, the file strucutre becomes clear
		the posts (which redirects to posts/index.html.erb btw) aka the view comes right after the domain
		and any html pages with the view come after the
	
	We also learned how to dynamically change the text
	
CHAPTER 19:


<remove> For resume can look at other resumes for those keywords! </remove>
		
		
